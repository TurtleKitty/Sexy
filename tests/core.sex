
; Sexy core

; def

(def x 5)
(test 'def (= x 5))


; quote

(test 'quote-symbol (= (quote foo) 'foo))
(test 'quote-list (= (list 1 2 3) '(1 2 3)))


; if

(test 'if-true
    (if true
        true
        false))

(test 'if-false
    (if false
        false
        true))

; seq

(test 'seq-1
    (= (seq 1) 1))

(test 'seq-2
    (= (seq 1 2) 2))

(test 'seq-3
    (= (seq 1 2 3) 3))


; set!

(def mute 1)

(test 'set!
    (seq
        (set! mute 2)
        (= mute 2)))

(test 'set-other
    (seq
        (set! mute "I'm a string!")
        (= mute "I'm a string!")))

(test 'set-higher
    (seq
        ((fn ()
            (set! mute 3)))
        (= mute 3)))

; fn

(test 'fn-identity
    (seq
        (def foo (fn (x) x))
        (= 'zebra (foo 'zebra))))

(test 'fn-add
    (seq
        (def bar (fn (x y) (+ x y)))
        (= 5 (bar 2 3))))

(test 'fn-recursion
    (seq
        (def fact
            (fn (n)
                (if (= n 1)
                    1
                    (* n (fact (- n 1))))))
        (= 120 (fact 5))))

(test 'fn-options
    (seq
        (def zuul
            (fn (x)
                (if opt.keymaster
                    (if opt.gatekeeper
                        (list x opt.keymaster opt.gatekeeper)
                        (list x opt.keymaster))
                    x)))
        (and?
            (= (zuul 'gozer) 'gozer)
            (= (zuul 'gozer keymaster: 'louis) '(gozer louis))
            (= (zuul 'gozer keymaster: 'louis gatekeeper: 'dana) '(gozer louis dana)))))

(test 'fn-rest
    (seq
        (def embiggen
            (fn (xs)
                (if xs.empty?
                    xs
                    (cons (* 10 xs.head) (embiggen xs.tail)))))
        (def various
            (fn (funk)
                (funk rest)))
        (= (various embiggen 1 2 3) '(10 20 30))))

(test 'fn-mutual-recursion
    (seq
        (def F
            (fn (n)
                (if (= n 0)
                    1
                    (- n (M (F (- n 1)))))))
        (def M
            (fn (n)
                (if (= n 0)
                    0
                    (- n (F (M (- n 1)))))))
        (and? (= (F 19) 12) (= (M 19) 12)))) 

(test 'fn-tco
    (seq
        (def count 12)
        (def upto
            (fn (max)
                (def helper
                    (fn (acc)
                        (if (= acc max)
                            acc
                            (helper (+ acc 1)))))
                (helper 0)))
        (= (upto count) count)))

(test 'fn-lexical-closure
    (seq
        (def counter
            (fn (x)
                (fn ()
                    (if opt.inc
                        (set! x (+ x opt.inc))
                        x))))
        (def c1 (counter 0))
        (def c2 (counter 23))
        (c1 inc: 1)
        (c2 inc: 7)
        (and? (= (c1) 1)
              (= (c2) 30)
              ((fn ()
                (def x 99)
                (c1 inc: 7)
                (and? (= x 99)
                      (= (c1) 8)))))))
            

; continuations - gate and capture

; errors - ensure, guard, and error


; use


(test 'use-file
    (seq
        (use "~/dev/sexy/tests/module.sex")
        (= (foreign-fn 1 2) '(foreigner 1 2))))

(test 'use-http
    (seq 
        (use "http://anwu.org/sexylib/fun.sex/1.0")
        (= (fun-fn 3 4 5) '(fun-object 3 7 20))))

;(test 'use-https
    ;(use "https://raw.githubusercontent.com/TurtleKitty/Sexy/master/tests/pre.sex")


(test 'use-as
    (seq
        (use "~/dev/sexy/tests/module.sex" as: meow)
        (= (meow.foreign-fn 3 4) '(foreigner 3 4))))


; misc

(test 'unicode
    (seq
        (def λא象
            (fn (x) (* 10 x)))
        (= (λא象 10) 100)))


