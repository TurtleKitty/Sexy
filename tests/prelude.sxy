
; global prelude macros and fns

(fun mahfun (x y)
    (* x y 10))

(sys.test 'fun
    (= 120 (mahfun 3 4)))

(sys.test '%
    (= (% x 1) (pair 'x 1)))

(sys.test ':
    (= (record 'x 1 'y 2) (: x 1 y 2)))

(sys.test 'null?
    (null? null))

(sys.test 'isa?
    (= true (isa? mahfun 'fn)))

(sys.test 'fn?
    (fn? mahfun))

(sys.test 'bool?
    (bool? false))

(sys.test 'symbol?
    (symbol? 'foo))

(sys.test 'num?
    (and (num? 0) (num? 3.14159)))

(sys.test 'int?
    (int? 23))

(sys.test 'nint?
    (nint? 2.71828))

(sys.test 'rune?
    (rune? $x))

(sys.test 'text?
    (text? "foo"))

(sys.test 'pair?
    (pair? (% 1 2)))

(sys.test 'list?
    (list? (list 1)))

(sys.test 'vector?
    (vector? (vector 2 3)))

(sys.test 'record?
    (record? (: x 1 y 2)))

(sys.test 'append
    (= '(1 2 3 4 5) (append '(1 2) '(3) '(4 5))))

(sys.test 'papply
    (=
        '(partially applied list 1 2 3)
        (let (x (papply list 'partially 'applied 'list))
            (x 1 2 3))))

(sys.test 'compose
    (let ()
        (fun f (xs) (xs.map (_ (* _ _))))
        (fun g (xs) (xs.map (_ (+ _ 10))))
        (and
            (= '(121 144 169 196 225 256 289)
                ((compose f g range) 1 7))
            (= '(11 14 19 26 35 46 59)
                ((compose g f range) 1 7)))))

(sys.test 'let
    ((fn ()
        (def foo
            (let loop (n 0)
                (if (= n 10)
                    n
                    (loop (+ n 1)))))
        (= foo 10))))

(sys.test 'cond
    ((thunk
        (fun foo (x)
            (cond
                (= x 0) 'foo
                (= x 1) 'bar
                (= x 2) (+ x x x)
                default: (* x x)))
        (and
            (= 'foo (foo 0))
            (= 'bar (foo 1))
            (= 6    (foo 2))
            (= 9    (foo 3))))))

(sys.test 'qq
    ((thunk
        (def x 1)
        (def y 'foo)
        (def z (list 2 3))
        (and
            (= (qq x) 'x)
            (= (qq (unq x)) 1)
            (= (qq (unq y)) 'foo)
            (= (qq (unq z)) '(2 3))
            (= (qq (x y z)) '(x y z))
            (= (qq (x (unq x) y (unq y) z (unq z))) '(x 1 y foo z (2 3)))
            (= (qq (x (unq x) y (unq y) z (unqs z))) '(x 1 y foo z 2 3))))))

(sys.test 'when
    (let ()
        (fun foo (x)
            (when (> x 10) 'is-a-biggun))
        (=  (list (foo 0) (foo 9) (foo 23) (foo 42) (foo 153))
           '(null null is-a-biggun is-a-biggun is-a-biggun))))

(sys.test 'chain
    (let ()
        (def xs (range 0 10))
        (fun foo (x) (* x x))
        (fun bar (x) (and (> x 10) (< x 100)))
        (= '(81 64 49 36 25 16)
            (chain xs
                (map foo)
                (filter bar)
                (sort >)))))

(sys.test 'case
    (let ()
        (fun foo (x)
            (case x
                (0) 'foo
                (1) 'bar
                (2 3) (+ x x x)
                default: (* x x)))
        (and
            (= 'foo (foo 0))
            (= 'bar (foo 1))
            (= 6    (foo 2))
            (= 9    (foo 3))
            (= 16   (foo 4)))))

(sys.test 'while
    (let (i 0 total 0)
        (def rv
            (while (< i 20)
                (set! total (+ total i))
                (set! i i.inc)
                (list i total)))
        (= rv '(20 190)))) 

(sys.test 'while-next
    (let (i 0 total 0)
        (def rv
            (while (< i 20)
                (set! i i.inc)
                (when (mod i 3)
                    (next (list 'next i total)))
                (set! total (+ total i))
                (list i total)))
        (= rv '(next 20 63))))

(sys.test 'while-last
    (let (i 0 total 0)
        (def rv
            (while (< i 20)
                (set! i i.inc)
                (when (> total 30)
                    (last (list 'last i total)))
                (set! total (+ total i))
                (list i total)))
        (= rv '(last 9 36))))

(sys.test 'for
    (= 210
        (for (i 0 total 0) (<= i 20) (set! i i.inc)
            (set! total (+ total i))
            total)))

(sys.test 'for-next
    (= 110
        (for (i 0 total 0) (<= i 20) (set! i i.inc)
            (when (mod i 2)
                (next total))
            (set! total (+ total i))
            total)))

(sys.test 'for-redo
    (= 220
        (for (i 0 total 0) (<= i 20) (set! i i.inc)
            (when (mod total 2)
                (set! total total.inc)
                (redo total))
            (set! total (+ total i))
            total)))

(sys.test 'for-last
    (= 105
        (for (i 0 total 0) (<= i 20) (set! i i.inc)
            (when (> total 100)
                (last total))
            (set! total (+ total i))
            total)))

(sys.test 'each
    (let (items (range 1 5) total 0)
        (each n items
            (set! total (+ total n)))
        (= total 15)))

(sys.test 'each-vector
    (let (items (apply vector (range 1 5) (:)) total 0)
        (each n items
            (set! total (+ total n)))
        (= total 15)))

(sys.test 'each-record
    (let (items (: x 1 y 2 z 3 u 4 v 5) total 0)
        (each n items
            (set! total (+ total n.val)))
        (= total 15)))

(sys.test '_
    (= '(2 4 9)
        (list
            ((_ (+ _ _)) 1)
            ((_ (* 2 _)) 2)
            ((_ (* _ _)) 3))))

(sys.test 'generic-functions
    ; generic functions!
    (= '(murakami 4 -4 1 5 16 6 ("1" "2" "3" "4" "5" "6" "7"))
        (let ()
            (gen nosuke 'murakami arity: 7) ; default case
            (spec nosuke (x)
                x.pos?
                (* x x))
            (spec nosuke (x)
                x.neg?
                (- (* x x)))
            (spec nosuke (x y)
                (> x y)
                (+ x y))
            (spec nosuke (x y)
                (< x y)
                (- y x))
            (spec nosuke (x y)
                (= x y)
                (* x y))
            (spec nosuke (x y z)
                rest.size.zero?
                (+ x y z))
            (spec nosuke (x y z p d q r)
                true
                ((send (list x y z p d q r) 'map) (_ _.to-text)))
            (list
                (nosuke 0)
                (nosuke 2)
                (nosuke -2)
                (nosuke 2 3)
                (nosuke 3 2)
                (nosuke 4 4)
                (nosuke 1 2 3)
                (nosuke 1 2 3 4 5 6 7)))))

(sys.test 'ndx
    ((thunk
        (def roll (ndx 10 6)) ; fireball!
        (and (>= roll 10) (<= roll 60)))))

(sys.test 'cat
    (and
        (=  "nulltrue x foobarbaz"
            (cat null true $space $x $space 'foo "bar" '($b $a $z)))
        (=  "null/true/x/foo/bar/baz"
            (cat null true $x 'foo "bar" '($b $a $z) with: "/"))))

