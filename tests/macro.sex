
; macro expansion

(test 'simple-macro
    (seq
        (macro foo (x y) (list 'list x y))
        (= (foo 1 2) '(1 2))))

(test 'macro-object
    (seq
        (macro brat (x)
            (def foo (obj 'a x))
            foo.a)
        (= (brat 1) 1)))

(test 'macro-writing-macro
    (seq
        (macro mac-on-mac (name body)
            (list 'macro name '(x y)
                (list
                    'list
                    '(quote quote)
                    (list 'list 'x 'y body))))
        (mac-on-mac boo 3)
        (mac-on-mac blorg 'meow)
        (and?
            (= (boo 1 2) '(1 2 3))
            (= (blorg 4 5) '(4 5 meow)))))

(test 'macro-with-internal-function
    ((fn ()
        (macro qux (foon ball)
            (fun bar (x y)
                (list (- x y) (* x y)))
            (list 'list (cons 'list (bar foon ball)) (cons 'list (bar ball foon))))
        (= (qux 2 3) '((-1 6) (1 6))))))

(test 'macro-with-external-function
    ((fn ()
        (def bar (fn (x y)
            (list (- x y) (* x y))))
        (macro quux (foon ball)
            (list 'list (cons 'list (bar foon ball)) (cons 'list (bar ball foon))))
        (= (quux 2 3) '((-1 6) (1 6))))))

;(test 'macro-with-internal-macro
;    ((fn ()
;        (macro bob (x y)
;            (macro fred (x)
;                (list 'list x (* x x)))
;            (cons 'list x (fred y))
;        (= (bob 1 2) '(1 2 4))))))

