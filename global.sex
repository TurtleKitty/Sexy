
; global environment

(macro fun (name vars body)
    (list 'def name
        (cons
            'fn
            (cons vars (cons body rest)))))

(fun isa? (thing type)
    (= thing.type type))

(fun pair? (thing)
    (isa? thing 'pair))

;(macro let (name vars)
;    (fun sep (x y xs names vals)
;        (if xs.empty?
;            (cons (cons x names) (cons y vals))
;            (sep (car xs) (cdr xs) (cddr xs) (cons x names) (cons y vals))))
;    (def p
;        (if vars.empty?
;            (cons '() '())
;            (sep (car vars) (cadr vars) (cddr vars) '() '())))
;    (def dname (list 'def name (list 'fn (car p) rest)))
;    (list 'seq dname (cons name (cdr p)))) 

