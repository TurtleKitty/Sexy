
; global environment

(macro fun (name vars body)
    (list 'def name
        (pair
            'fn
            (pair vars (pair body rest)))))

(fun isa? (thing type)
    (= thing.type type))

(fun bool? (thing)
    (isa? thing 'bool))

(fun fn? (thing)
    (isa? thing 'fn))

(fun null? (thing)
    (= thing null))

(macro let (name vars)
    (fun sep (x y xs names vals)
        (if xs.empty?
            (pair ((pair x names) 'reverse) ((pair y vals) 'reverse))
            (sep xs.head xs.1 xs.tail.tail (pair x names) (pair y vals))))
    (def p
        (if vars.empty?
            (pair '() '())
            (sep vars.head vars.1 vars.tail.tail '() '())))
    (def dname (list 'def name (((list 'fn p.head) 'append) rest)))
    (list (list 'fn '() dname (pair name p.tail))))

