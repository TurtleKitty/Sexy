
; global environment

(macro fun (name vars body)
    (list 'def name
        (cons
            'fn
            (cons vars (cons body rest)))))

(fun isa? (thing type)
    (= thing.type type))

(fun pair? (thing)
    (isa? thing 'pair))

(macro let (name vars)
    (fun sep (x y xs names vals)
        (if xs.empty?
            (cons ((cons x names) 'reverse) ((cons y vals) 'reverse))
            (sep xs.head xs.1 xs.tail.tail (cons x names) (cons y vals))))
    (def p
        (if vars.empty?
            (cons '() '())
            (sep vars.head vars.1 vars.tail.tail '() '())))
    (def dname (list 'def name (((list 'fn p.head) 'append) rest)))
    (list (list 'fn '() dname (cons name p.tail))))

