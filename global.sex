
; global environment

(macro fun (name vars body)
    (list 'def name
        (cons
            'fn
            (cons vars (cons body rest)))))

(fun isa? (thing type)
    (= thing.type type))

(fun pair? (thing)
    (isa? thing 'pair))

;(macro let (name-or-vars vars-or-body)
;    (if (pair? name-or-vars)
;        (seq
;            (def vars name-or-vars)
;            (def bodies (cons vars-or-body rest))
;            '((fn ())))
;        (seq
;            (def name name-or-vars)
;            (def vars vars-or-body)
;            (list 'fn null
;                (list 'def name (cons fn (cons vars rest)))))))
