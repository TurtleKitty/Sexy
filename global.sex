
; global environment

(macro fun (name vars body)
    (list 'def name
        (cons
            'fn
            (cons vars (cons body rest)))))

(fun isa? (obj type)
    (eq? obj.type type))

(fun pair? (obj)
    (isa? obj 'pair))

(fun bar (x)
    (fun baz (y) (* y y))
    (baz x))

(show (bar 5))

(macro funner (name body)
    (list 'macro name '(x y)
        (list
            'list
            '(quote show)
            (list
                'list
                '(quote quote)
                (list 'list 'x 'y body)))))

; (list 'show (list 'list x y 'z))

(funner boo 'z)
(funner blorg 'meow)

(boo 1 2)
(blorg 4 5)

(macro bob (x)
    (macro fred (y)
        (list 'list x y))
    (fred 2))

(show (bob 1))

;(macro let (name-or-vars vars-or-body)
;    (if (pair? name-or-vars)
;        (seq
;            (def vars name-or-vars)
;            (def bodies (cons vars-or-body rest))
;            '((fn ())))
;        (seq
;            (def name name-or-vars)
;            (def vars vars-or-body)
;            (list 'fn null
;                (list 'def name (cons fn (cons vars rest)))))))
