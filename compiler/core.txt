
object

type
view
write
print
to-bool
messages
answers?
autos
resends
default


null

view write print to-symbol -> self
to-bool -> false
(apply () (:)) -> ERROR


bool

view
write print to-bool to-symbol -> self
not -> (not self)


int

view
to-text
to-bool -> 0 is false, else true
zero?
pos?
neg?
abs
floor
ceil
round
truncate
inc
dec
even?
odd?


real

view
to-text
to-bool
zero?
pos?
neg?
abs
floor
ceil
round
truncate


rune

view
to-rune
to-text
to-bool -> true
to-number -> int, real, or ERROR
code -> UTF8
alpha?
digit?
whitespace?
uc?
lc?
uc
lc


symbol

view
to-bool
to-text


bin

view  (64 127 99 22 ...)
to-bool 'true
to-number -> ReallyBigInt
to-list -> list of ints
to-text -> UTF8
size -> no of bytes
clone
set! <index> <uint 0-255>


text

view
to-bool -> empty is false, else true
to-symbol
to-option
to-number -> int or real
to-list -> (\a \b \c)
to-bin -> bin
to-text -> self
to-stream
size
empty?
clone
chomp
trim
ltrim
rtrim
(lpad \rune n)
(rpad \rune n)
(take n)
(drop m)
set! ???
(index "subtext")
(match "regex")
(split "regex")
(capture "regex")
(replace "regex" "replacement")


pair

view
to-bool -> () is false, else true
to-text
to-list
to-text -> all items must be runes
to-vector
to-record
size
empty?
reverse
head key car
tail val cdr
(cons x)
(has? x)
(append x)
(take n)
(drop n)
(apply (n) null)
(fold init proc)
(reduce init proc)
(map proc)
(filter proc)
(sort op)
(each proc)


vector

view
to-bool -> (#) is false, else true
to-text -> all items must be runes
to-list
to-vector
to-record
size
empty?
clone
pairs
(has? item)
(index item) -> n or null
(put n v n v n v)   ; functional
(set! n v n v n v)  ; imperative
(append x)
(take n)
(drop n)
(apply (n) null)
(fold init proc)
(reduce init proc)
(map proc)
(filter proc)
(sort op)
(each proc)


record

view
to-bool
to-list   -> alist
to-record
to-text
size
empty?
keys
values
pairs
clone
(get k)
(put k v k2 v2 ...)
(rm k k2 k3)
(set! k 1 k2 2 k3 3 ...)
(del! k k2 k3 ...)
(has? k)
(apply (k) null)
(merge r)
(fold init proc)
(reduce init proc)
(map proc) -> record
(filter proc) -> record
(sort op) -> alist
(each proc)


env (standard | repl | immutable | wild)

view
mama
to-env
to-bool
to-text
to-list
to-record
empty?
(def! x 1 y 2 z 3 ...)
(get x)
(set! x 2 y 3 z 5 ...)
(has? x)     ; local
(del! x y z ...)
(lookup x)   ; local or ancestral
(lookup-list '(x y z))
(extend u 7 v 8)
(partition '(x y z))
(expand form)
(eval expr)


proc / λ / operator

view
to-bool
to-text
arity
formals
code
env
(apply (args) (: opts))


stream

view
to-bool
input?
output?
open?
close

source

view
to-bool -> open?
to-text -> printable
ready?
read
read-rune
peek-rune
read-line
read-lines -> to-list
read-text -> slurp
read-sexy -> all sexy forms to list
(assert-rune "runes")
(skip n)
(skip-while "runes")
(skip-until "runes")
(read-tokens n)
(read-token-while "runes")
(read-token-until "runes")
(read-token-if proc)
(each proc) ?

sink

flush
nl -> newline
(write obj) -> obj.view
(print obj) -> obj.to-text
(say obj)   -> obj.print + obj.nl


fs-socket

to-bool -> true
ready? -> true if there is a connection ready to be accepted
accept -> accepts a connection and returns a socket
close -> shut down the TCP listener
path -> returns the file system path of the listener

socket messages

to-bool -> true
close -> close the socket
path -> file system path the socket is connected to


tcp-socket

to-bool -> true
ready? -> true if there is a connection ready to be accepted
accept -> accepts a connection and returns a socket
close -> shut down the TCP listener
ip -> returns local IP address
port -> returns the port number of the listener

socket messages

to-bool -> true
close -> close the socket
local-addr -> local IP address of the socket
local-port -> local port number of the socket
remote-addr -> remote IP address of the socket
remote-port -> remote port number of the socket


time

type 'time
view <unix-epoch>
write (time: <unix-epoch>)
print "2012-04-01"
to-int <unix-epoch int>
to-text "2012-04-01"
(fmt <format>)
(add <time-interval>) -> time
(sub <time-interval>) -> time
(diff <time>) -> time-interval


sys

sys.messages
(say fs view write read load shell rest test 64764 time stderr stdin net proc launch-the-missile opt ts srand print stdout log env signal)

sys.fs.messages
(rm ls dir? chroot ln tmp socket-pair listen mv symlink? read pwd to from cp cd connect stat mkdir write exists? tmp-dir rmdir)

sys.net.messages
(tcp http)

sys.proc.messages
(process-gid program-name exit sleep pid parent-pid uid run fork gid)

sys.signal.messages
(quit usr1 stop int kill alrm handle pipe masked? cont abrt handler send segv hup term mask usr2 unmask chld fpe ill)

sys.env.messages
(del! set! view hostname get uname)


blessed keywords:

def
if
quote
seq
macro
λ
proc
wall
gate
capture
guard
error


dynamic variables:

env
opt
rest
return


core procs, operators, and objects:

syntax
macro-eval

+
-
*
/
div
rem
mod
is?
=
>
<

bin
text
pair
list
vector
record
environment
time
object

rand
uuid

send
apply
syntax-ok?
gensym
math
physics


reader literals:

'foo
"foo"
\r
()
(x . y)
(1 2 3)
(text:)
(template: {{ }})
(vector:)
(record:)


prelude:

(macro lib (vars body))
(macro thunk ())
(proc isa? (thing type))
(proc bool? (thing))
(proc proc? (thing))
(proc operator? (thing))
(proc symbol? (thing))
(proc stream? (thing))
(proc socket? (thing))
(proc null? (thing))
(proc record? (thing))
(proc eof? (x))
(proc not (x))
(proc != (x y))
(proc >= (x y))
(proc <= (x y))
(macro and (x))
(macro or (x))
(proc and? (x))
(proc or? (x))
(proc nand ())
(proc nor ())
(proc xor (x y))
(proc identity (x) x))
(proc append (xs ys))
(proc papply (f))
(proc compose ())
(macro let (name-or-vars))
(macro : ())
(macro cond ())
(macro qq (expr))
(macro when (pred))
(macro case (val))
(macro while (pred body))
(macro _ (body))
(macro set! ())
(macro del! ())
(macro ensure (thnk))
(macro test ())
(macro qw ())
(macro everywhere ())
(macro with-gensyms (gs))
(macro chain (obj))
(macro for (init pred update body))
(macro each (name arg body))
(proc range (start end))
(macro # ())
(macro matrix ())
(macro gen (name body))
(macro spec (name args pred body))
(macro assert (predicate))
(proc ndx (n x))
(proc repl (e in out err))
(proc parse (s))
(proc resend (msg))
(def json)
(macro promise (expr) ; lazy evaluation)
(proc seal (obj) )
(macro alias (name new-alias))


reserved for the future:

(def א null)
(def ! null)
(def ? null)
(def & null)
(def ~ null)
(def ^ null)
(def | null)

