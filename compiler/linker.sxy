
(use gen-pass "passes/generic.sxy")

(lib () loader)

(def module-fns (:))
(def module-code (:))
(def slurp-file (位 (f) (error 'slurp-file-undefined!)))

(def sexy-expanded-dir "~/.sexy/expanded")

(proc get-sexy-path (f)
    (f.replace flags: "g" "[^a-zA-Z0-9_.]" "_"))

(proc get-sexy-expanded-path (f)
    (cat with: "/" sexy-expanded-dir (get-sexy-path f)))


; (use <name> "foo" x y z ...) -> (sexy-module-UUID x y z)
; assume the macro expander fetched, cached, and expanded the modules

(proc loader (form sys)
    (debug %(linker $form))
    (set! slurp-file
        (proc (f)
            (sys.fs.from
                f
                (位 (p)
                    p.read-text))))
    (def loaded (pass form))
    %(seq @module-code.values $loaded))

(proc pass (form)
    (if (pair? form)
        (case form.head
            (use)
                (let (use-name form.1 use-uri form.2 use-args form.tail.tail.tail)
                    (if (module-fns.has? use-uri)
                        %(def $use-name (wall (gate ($(module-fns use-uri) @use-args))))
                        (let (mod-fn (send (cat "sexy-primitive-module-" (uuid)) 'to-symbol))
                            (def this-file (slurp-file (get-sexy-expanded-path use-uri)))
                            (def this-mod (send (parse this-file) 'head))
                            (module-fns.set! use-uri mod-fn)
                            (def code
                                (pass this-mod))
                            (module-code.set! use-uri
                                %(def $mod-fn
                                    ((位 ()
                                        (seq
                                            $code
                                            sexy-internal-library-export-procedure)))))
                            %(def $use-name (wall (gate ($mod-fn @use-args)))))))
            (def quote if seq wall gate capture guard error proc 位)
                ((gen-pass form.head) pass form)
            default:
                ((gen-pass 'application) pass form))
        form))

