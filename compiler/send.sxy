
(lib () sender)

(macro prob ()
    %(λ (obj) @rest))

(macro prom ()
    %(λ (msg) @rest))

(def default-messages
    '(type view to-text to-bool messages answers? autos resends default))

(proc idk (obj)
    (prom
        (error
            'message-not-understood
            %(send $obj (quote $msg))
            "Message not understood."))) 

(def null-messages '(to-symbol apply))

(def control-null (:
    type      (prob 'null)
    view      (prob "null")
    to-text   (prob "null")
    to-bool   (prob false)
    messages  (prob null-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (null-messages.has? msg))))
    autos     (prob '(to-symbol))
    resends   (prob ())
    default   (prob (prom null))
    to-symbol (prob null)
    apply (prob
        (error
            'apply-null
            null
            "null can not be used as a procedure."))
))

(def bool-messages '(to-symbol not))

(def control-bool (:
    type      (prob 'bool)
    view      (prob (if obj "true" "false"))
    to-text   (prob (if obj "true" "false"))
    to-bool   (prob obj)
    messages  (prob bool-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (bool-messages.has? msg))))
    autos     (prob ())
    resends   (prob ())
    default   idk
    to-symbol (prob obj)
    not       (prob (sexy-internal-not obj))
))

(def int-messages '(to-number zero? pos? neg? odd? even? abs floor ceil round truncate inc dec))

(def control-int (:
    type      (prob 'int)
    view      (prob (sexy-internal-number-to-text obj))
    to-text   (prob (sexy-internal-number-to-text obj))
    to-bool   (prob (sexy-internal-not (= obj 0)))
    messages  (prob int-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (int-messages.has? msg))))
    autos     (prob '(to-number zero? pos? neg? odd? even? abs floor ceil round truncate inc dec))
    resends   (prob ())
    default   idk
    to-number (prob obj)
    to-utf8   (prob (sexy-internal-int-to-rune obj))
    zero?     (prob (= obj 0))
    pos?      (prob (> obj 0))
    neg?      (prob (< obj 0))
    odd?      (prob (= 1 (mod obj 2)))
    even?     (prob (= 0 (mod obj 2)))
    abs       (prob (sexy-internal-abs obj))
    floor     (prob obj)
    ceil      (prob obj)
    round     (prob obj)
    truncate  (prob obj)
    inc       (prob (+ obj 1))
    dec       (prob (- obj 1))
))

(def rat-messages '(to-number zero? pos? neg? abs floor ceil round truncate))

(def control-rat (:
    type      (prob 'rational)
    view      (prob (sexy-internal-number-to-text obj))
    to-text   (prob (sexy-internal-number-to-text obj))
    to-bool   (prob (sexy-internal-not (= obj 0)))
    messages  (prob rat-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (rat-messages.has? msg))))
    autos     (prob '(to-number zero? pos? neg? abs floor ceil round truncate))
    resends   (prob ())
    default   idk
    to-number (prob obj)
    zero?     (prob false)
    pos?      (prob (> obj 0))
    neg?      (prob (< obj 0))
    abs       (prob (sexy-internal-abs obj))
    floor     (prob (sexy-internal-floor obj))
    ceil      (prob (sexy-internal-ceil obj))
    round     (prob (sexy-internal-round obj))
    truncate  (prob (sexy-internal-truncate obj))
))

(def real-messages '(to-number zero? pos? neg? abs floor ceil round truncate))

(def control-real (:
    type      (prob 'real)
    view      (prob (sexy-internal-number-to-text obj))
    to-text   (prob (sexy-internal-number-to-text obj))
    to-bool   (prob (sexy-internal-not (= obj 0)))
    messages  (prob real-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (real-messages.has? msg))))
    autos     (prob '(to-number zero? pos? neg? abs floor ceil round truncate))
    resends   (prob ())
    default   idk
    to-number (prob obj)
    zero?     (prob (= obj 0))
    pos?      (prob (> obj 0))
    neg?      (prob (< obj 0))
    abs       (prob (sexy-internal-abs obj))
    floor     (prob (sexy-internal-floor obj))
    ceil      (prob (sexy-internal-ceil obj))
    round     (prob (sexy-internal-round obj))
    truncate  (prob (sexy-internal-truncate obj))
))

(def rune-messages '(to-rune to-int code alpha? digit? whitespace? uc? lc? uc lc))

(def control-rune (:
    type      (prob 'rune)
    view      (prob (sexy-internal-list-to-text (list \\ obj))) ; FIXME \space, \tab, \newline, \return
    to-text   (prob (sexy-internal-text obj))
    to-bool   (prob (sexy-internal-not (sexy-internal-rune-whitespace? obj)))
    messages  (prob rune-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (rune-messages.has? msg))))
    autos     (prob rune-messages)
    resends   (prob ())
    default   idk
    to-rune   (prob obj)
    to-int    (prob (sexy-internal-text-to-number (sexy-internal-text obj)))
    code      (prob (sexy-internal-rune-to-int obj))
    alpha?       (prob (sexy-internal-rune-alpha? obj))
    digit?       (prob (sexy-internal-rune-digit? obj))
    whitespace?  (prob (sexy-internal-rune-whitespace? obj))
    uc?  (prob (sexy-internal-rune-uc? obj))
    lc?  (prob (sexy-internal-rune-lc? obj))
    uc   (prob (sexy-internal-rune-uc obj))
    lc   (prob (sexy-internal-rune-lc obj))
))

(def symbol-messages '(to-symbol))

(def control-symbol (:
    type      (prob 'symbol)
    view      (prob (sexy-internal-symbol-to-text obj))
    to-text   (prob (sexy-internal-symbol-to-text obj))
    to-bool   (prob true)
    messages  (prob symbol-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (symbol-messages.has? msg))))
    autos     (prob symbol-messages)
    resends   (prob ())
    default   idk
    to-symbol (prob obj)
))

(def bin-messages '(to-int to-list to-vector size clone set!))

(def control-bin (: ; FIXME
    type      (prob 'bin)
    view      (prob (sexy-internal-bin-to-text obj))
    to-text   (prob (sexy-internal-bin-to-text obj))
    to-bool   (prob true)
    messages  (prob bin-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (bin-messages.has? msg))))
    autos     (prob '(to-number to-list size clone))
    resends   (prob ())
    default   idk
    to-int    idk
    to-list   idk
    to-vector idk
    size      idk
    clone     idk
    set!      idk
))

(def text-messages '(to-symbol to-option to-number to-list to-bin to-stream size empty? clone chomp trim ltrim rtrim lpad rpad set! index take drop match split capture replace))

(def control-text (:
    type      (prob 'text)
    view      (prob (cat \" obj \"))
    to-text   (prob obj)
    to-bool   (prob (if (= "" obj) false true))
    messages  (prob text-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (text-messages.has? msg))))
    autos     (prob text-messages) ; FIXME
    resends   (prob ())
    default   (prob
                 (prom 
                     (if (number? msg)
                         (if (> (sexy-internal-text-size obj) msg)
                             (sexy-internal-text-ref obj msg)
                             (error 'out-of-bounds %(send $obj $msg) "text: index out of bounds."))
                         ((idk obj) msg))))
    to-symbol   (prob (sexy-internal-text-to-symbol obj))
    to-option   (prob (sexy-internal-text-to-keyword obj))
    to-number   (prob (sexy-internal-text-to-number obj))
    to-list     (prob (sexy-internal-text-to-list obj))
    to-bin      (prob (sexy-internal-text-to-bin obj))
    to-stream   (prob (sexy-internal-text-to-stream obj))
    size    (prob (sexy-internal-text-size obj))
    empty?  (prob (= "" obj))
    clone   (prob (sexy-internal-text-clone obj))
    chomp   (prob (sexy-internal-text-chomp obj))
    trim    (prob (sexy-internal-text-trim obj))
    ltrim   (prob (sexy-internal-text-trim-left obj))
    rtrim   (prob (sexy-internal-text-trim-right obj))
    lpad    (prob (λ (rune n) (sexy-internal-text-pad-left obj rune n)))
    rpad    (prob (λ (rune n) (sexy-internal-text-pad-right obj rune n)))
    set!    (prob (λ (n rune) (sexy-internal-text-set! obj n rune)))
    index   (prob (λ (substr) (sexy-internal-text-subtext-index obj substr)))
    take    (prob (λ (n) (sexy-internal-text-take obj n)))
    drop    (prob (λ (n) (sexy-internal-text-drop obj n)))
    match (prob
        (proc (regex)
            (def flags (or opt.flags ""))
            (sexy-internal-text-match obj regex flags)))
    split (prob
        (proc (regex)
            (def flags (or opt.flags ""))
            (sexy-internal-text-split obj regex flags)))
    capture (prob
        (proc (regex)
            (def flags (or opt.flags ""))
            (sexy-internal-text-capture obj regex flags)))
    replace (prob
        (proc (regex replacement)
            (def flags (or opt.flags ""))
            (sexy-internal-text-replace obj regex flags)))
))

(def env-messages
    '(mama to-list to-record empty? size empty? clone def! has? get set! del! lookup lookup-list extend partition expand eval))

(def control-env (:
    type      (prob 'env)
    view      (prob (sexy-internal-env-to-text obj))
    to-text   (prob (sexy-internal-env-to-text obj))
    to-bool   (prob true)
    messages  (prob env-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (env-messages.has? msg))))
    autos     (prob '(empty? mama to-list to-record))
    resends   (prob ())
    default   idk
    mama      (prob (sexy-internal-env-mama obj))
    to-list   (prob (sexy-internal-env-to-list obj))
    to-record (prob (sexy-internal-env-to-record obj))
    empty?    (prob (= 0 (sexy-internal-env-size obj)))
    def!      (prob (sexy-internal-env-def! obj))   ; local
    get       (prob (sexy-internal-env-get obj))    ; local
    set!      (prob (sexy-internal-env-set! obj))   ; local or ancestral
    has?      (prob (sexy-internal-env-has? obj))   ; local
    del!      (prob (sexy-internal-env-del! obj))   ; local or ancestral
    lookup    (prob (sexy-internal-env-lookup obj)) ; local or ancestral
    lookup-list  (prob (sexy-internal-env-lookup-list obj)) ; local or ancestral
    extend       (prob (sexy-internal-env-extend obj))
    partition    (prob (sexy-internal-env-partition obj))
    seal! null ; FIXME
    wild! null ; FIXME
    expand    (prob 
        ; FIXME : macroexpand expr
    )
    eval      (prob
        ; FIXME : expand then interpret expr
    )
))

(def pair-messages
    '(head key tail val to-list to-vector to-record size empty? reverse cons has? append take drop apply fold reduce map filter sort each))

(def control-pair (:
    type      (prob 'pair)
    view      (prob (sexy-internal-pair-view obj))
    to-text   (prob (sexy-internal-pair-to-text obj)) ; all members must be runes
    to-bool   (prob (if (= () obj) false true))
    messages  (prob pair-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (pair-messages.has? msg))))
    autos     (prob '(head key tail val to-list to-vector to-record size empty? reverse))
    resends   (prob ())
    default   (prob
                (prom
                    (if (= (sexy-internal-get-object-type msg) 'int)
                        (sexy-internal-list-ref obj msg)
                        (idk))))
    head      (prob (sexy-internal-pair-head obj))
    key       (prob (sexy-internal-pair-head obj))
    car       (prob (sexy-internal-pair-head obj))
    tail      (prob (sexy-internal-pair-tail obj))
    val       (prob (sexy-internal-pair-tail obj))
    cdr       (prob (sexy-internal-pair-tail obj))
    to-list   (prob
                (if (sexy-internal-list? obj)
                    obj
                    (sexy-internal-list
                        (sexy-internal-pair-head obj)
                        (sexy-internal-pair-tail obj))))
    to-vector (prob (sexy-internal-pair-to-vector obj))
    to-record (prob (sexy-internal-pair-to-record obj))
    size      (prob (sexy-internal-pair-size obj))
    empty?    (prob (if (= obj ()) true false))
    reverse   (prob (sexy-internal-pair-reverse obj))
    cons      (prob
                (proc (item)
                    (sexy-internal-pair item obj)))
    has?      (prob
                (proc (item)
                    (sexy-internal-pair-has? obj item)))
    append    null ; FIXME
    take      (prob
                (proc (n)
                    (sexy-internal-pair-take obj n)))
    drop      (prob
                (proc (n)
                    (sexy-internal-pair-drop obj n)))
    apply     (prob
                (λ (args options)
                    (if (!= (sexy-internal-pair-size args) 1)
                        (error 'arg-error %(list.apply args opts) "list.apply takes only one integer argument.")
                        (sexy-internal-list-ref obj (sexy-internal-pair-head args)))))
    fold      (prob
                (λ (acc funk)
                    (if obj.empty?
                        acc
                        (obj.tail.fold (funk acc obj.head) funk))))
    reduce    (prob
                 (λ (acc funk)
                     (if obj.empty?
                         acc
                         (funk obj.head (obj.tail.reduce acc funk)))))
    map       (prob
                 (λ (funk)
                     (obj.reduce () (λ (x y) (pair (funk x) y)))))
    filter    (prob
                 (λ (funk)
                     (obj.reduce () (λ (x y) (if (funk x) (pair x y) y)))))
    sort      (prob
                 (λ (funk)
                     (def merge (λ (a b)
                         (if a.size.zero?
                             b
                             (if b.size.zero?
                                 a
                                 (if (funk a.head b.head)
                                     (pair a.0 (merge a.tail b))
                                     (pair b.0 (merge a b.tail)))))))
                     (def sort (λ (yarr)
                         (def len yarr.size)
                         (if (< len 2)
                             yarr
                             (seq
                                 (def half (send (/ len 2) 'floor))
                                 (merge (sort (yarr.take half)) (sort (yarr.drop half)))))))
                     (sort obj)))
    each      (prob
                 (λ (funk)
                     (if xs.empty?
                         null
                         (seq
                             (funk xs.head)
                             (xs.tail.each funk)))))
))

(def vector-messages
    '(size empty? has? index put set! to-list to-vector to-record append take drop apply fold reduce map filter sort each))

(def control-vector (:
    type      (prob 'vector)
    view      (prob (sexy-internal-vector-view obj))
    to-text   (prob (sexy-internal-vector-to-text obj)) ; all members must be runes
    to-bool   (prob (if (= 0 (sexy-internal-vector-size obj)) false true))
    messages  (prob vector-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (vector-messages.has? msg))))
    autos     (prob '(to-list to-vector to-record size empty?))
    resends   (prob ())
    default   (prob
                (prom
                    (if (= (sexy-internal-get-object-type msg) 'int)
                        (sexy-internal-vector-ref obj msg)
                        (idk))))
    to-list   (prob (sexy-internal-vector-to-list obj))
    to-vector (prob obj)
    to-record (prob (sexy-internal-vector-to-record obj))
    size      (prob (sexy-internal-vector-size obj))
    empty?    (prob (if (= 0 (sexy-internal-vector-size obj)) true false))
    has?      (prob
                (proc (item)
                    (sexy-internal-vector-has? obj item)))
    append    null ; FIXME
    take      (prob
                (proc (n)
                    (sexy-internal-vector-take obj n)))
    drop      (prob
                (proc (n)
                    (sexy-internal-vector-drop obj n)))
    apply     (prob
                (λ (args options)
                    (if (!= (sexy-internal-vector-size args) 1)
                        (error 'arg-error %(vector.apply args opts) "vector.apply takes only one integer argument.")
                        (sexy-internal-vector-ref obj (sexy-internal-pair-head args)))))
    fold      (prob null) ;FIXME
    reduce    (prob null) ;FIXME
    map       (prob null) ;FIXME
    filter    (prob null) ;FIXME
    sort      (prob null) ;FIXME
    each      (prob null) ;FIXME
))

(def record-messages
    '(to-list to-record size empty? keys values pairs clone get put rm set! del! has? apply merge fold reduce map filter sort each))

(def control-record (:
    type      (prob 'record)
    view      (prob (sexy-internal-record-to-text obj))
    to-text   (prob (sexy-internal-record-to-text obj))
    to-bool   (prob (if (= 0 sexy-internal-record-size obj) false true))
    messages  (prob record-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (record-messages.has? msg))))
    autos     (prob '(size keys values pairs clone to-list to-record))
    resends   (prob ())
    default   (prob
                (prom
                    (if (sexy-internal-record-has? obj msg)
                        (sexy-internal-record-has? obj msg)
                        null)))
    to-list   (prob (sexy-internal-record-to-list obj))
    to-record (prob obj)
    size      (prob (sexy-internal-record-size obj))
    empty?    (prob (= 0 (sexy-internal-record-size obj)))
    keys      (prob (sexy-internal-record-keys obj))
    values    (prob (sexy-internal-record-values obj))
    pairs     (prob (sexy-internal-record-to-list obj))
    clone     (prob (sexy-internal-record-clone obj))
    get       (prob (proc (k) (sexy-internal-record-get obj k)))
    put       (prob (proc () (sexy-internal-record-put obj rest)))
    rm        (prob (proc () (sexy-internal-record-rm obj rest)))
    set!      (prob (proc () (sexy-internal-record-set! obj rest)))
    del!      (prob (proc () (sexy-internal-record-del! obj rest)))
    has?      (prob (proc (k) (sexy-internal-record-has? obj k)))
    merge     (prob (proc (other) (sexy-internal-record-merge obj other)))
    apply     (prob
                (λ (args options)
                    (if (!= (sexy-internal-pair-size args) 1)
                        (error 'arg-error %(record.apply $args $options) "Record apply takes only one argument.")
                        (sexy-internal-record-get obj args.head))))
    fold      (prob
                (def xs obj.to-list)
                (λ (acc funk)
                    (if xs.empty?
                        acc
                        (xs.tail.fold (funk acc xs.head) funk))))
    reduce    (prob
                (def xs obj.to-list)
                (λ (acc funk)
                    (if xs.empty?
                        acc
                        (funk xs.head (xs.tail.reduce acc funk)))))
    map       (prob
                (def noob (record))
                (def ps obj.pairs)
                (λ (funk)
                    (ps.each (λ (p) (noob.set! p.head (funk p))))))
    filter    (prob
                (def noob (record))
                (def ps obj.pairs)
                (λ (funk)
                    (ps.each (λ (p) (if (funk p) (noob.set! p.head p.tail) null)))))
    each      (prob
                (λ (funk)
                    (obj.to-list.each funk)))
))

(def proc-messages '(apply arity code env formals))

(def control-λ (:
    type      (prob 'λ)
    view      (prob (sexy-internal-λ-to-text obj))
    to-text   (prob (sexy-internal-λ-to-text obj))
    to-bool   (prob true)
    messages  (prob proc-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (proc-messages.has? msg))))
    autos     (prob '(arity code env formals))
    resends   (prob ())
    default   idk
    apply     (prob (λ (args opts) (sexy-internal-apply obj args opts)))
    arity     (prob (sexy-internal-proc-arity obj))
    code      (prob (sexy-internal-proc-code obj))
    env       (prob (sexy-internal-proc-env obj))
    formals   (prob (sexy-internal-proc-formals obj))
))

(def control-proc (:
    type      (prob 'proc)
    view      (prob (sexy-internal-proc-to-text obj))
    to-text   (prob (sexy-internal-proc-to-text obj))
    to-bool   (prob true)
    messages  (prob proc-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (proc-messages.has? msg))))
    autos     (prob '(arity code env formals))
    resends   (prob ())
    default   idk
    apply     (prob (λ (args opts) (sexy-internal-apply obj args opts)))
    arity     (prob (sexy-internal-proc-arity obj))
    code      (prob (sexy-internal-proc-code obj))
    env       (prob (sexy-internal-proc-env obj))
    formals   (prob (sexy-internal-proc-formals obj))
))

(def control-operator (:
    type      (prob 'operator)
    view      (prob (sexy-internal-operator-to-text obj))
    to-text   (prob (sexy-internal-operator-to-text obj))
    to-bool   (prob true)
    messages  (prob proc-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (proc-messages.has? msg))))
    autos     (prob '(arity code env formals))
    resends   (prob ())
    default   idk
    apply     (prob (λ (args opts) (sexy-internal-apply obj args opts)))
    arity     (prob (sexy-internal-proc-arity obj))
    code      (prob (sexy-internal-proc-code obj))
    env       (prob (sexy-internal-proc-env obj))
    formals   (prob (sexy-internal-proc-formals obj))
))

(def source-messages
    '(open? ready? close
      read read-rune peek-rune read-line read-lines read-text read-sexy
      assert-rune skip skip-while skip-until read-tokens
      read-tokens-while read-tokens-until read-token-if each))

(def control-source (:
    type      (prob 'source)
    view      (prob (sexy-internal-source-view obj))
    to-text   (prob (sexy-internal-source-view obj))
    to-bool   (prob true)
    messages  (prob source-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (source-messages.has? msg))))
    autos     (prob '(open? ready? close read read-rune peek-rune read-line read-text read-sexy))
    resends   (prob ())
    default   idk
    open?     (prob (sexy-internal-stream-open? obj))
    ready?    (prob (sexy-internal-stream-ready? obj))
    close     (prob (sexy-internal-stream-close obj))
    read      (prob (sexy-internal-source-read obj))
    read-rune (prob (sexy-internal-source-read-rune obj))
    peek-rune (prob (sexy-internal-source-peek-rune obj))
    read-line (prob (sexy-internal-source-read-line obj))
    read-lines (prob (sexy-internal-source-read-lines obj))
    read-text (prob (sexy-internal-source-read-text obj))
    read-sexy (prob (sexy-internal-source-read-sexy obj))
    assert-rune (prob
        (λ (runes)
            (def rune-list runes.to-list)
            (def next obj.read-rune)
            (if (rune-list.has? next)
                next
                (error
                    'assert-rune-FAIL %(assert-rune $runes $next) "Assertion failed."))))
    skip (prob
        (λ (n)
            (let loop (x n)
                (if x.zero?
                    null
                    (seq
                        obj.read-rune
                        (loop x.dec))))))
    skip-while (prob
        (λ (runes)
            (def rune-list runes.to-list)
            (let loop (tok obj.peek-rune)
                (if (rune-list.has? tok)
                    (seq
                        obj.read-rune
                        (loop obj.peek-rune))
                    null))))
    skip-until (prob
        (λ (runes)
            (def rune-list runes.to-list)
            (let loop (tok obj.peek-rune)
                (if (rune-list.has? tok)
                    null
                    (seq
                        obj.read-rune
                        (loop obj.peek-rune))))))
    read-tokens (prob
        (λ (n)
            (let loop (x n tokens ())
                (if x.zero?
                    tokens.reverse.to-text
                    (loop x.dec (pair obj.read-rune tokens))))))
    read-token-while (prob
        (λ (runes)
            (def rune-list runes.to-list)
            (let loop (tok obj.peek-rune tokens ())
                (if (rune-list.has? tok)
                    (loop obj.peek-rune (pair obj.read-rune tokens))
                    tokens.reverse.to-text))))
    read-token-until (prob
        (λ (runes)
            (def rune-list runes.to-list)
            (let loop (tok obj.peek-rune tokens ())
                (if (rune-list.has? tok)
                    tokens.reverse.to-text
                    (loop obj.peek-rune (pair obj.read-rune tokens))))))
    read-token-if (prob
        (λ (pred?)
            (let loop (tok obj.peek-rune tokens ())
                (if (pred? tok)
                    (loop obj.peek-rune (pair obj.read-rune tokens))
                    tokens.reverse.to-text))))
))

(def sink-messages
    '(open? close flush write print say nl))

(def control-sink (:
    type      (prob 'sink)
    view      (prob (sexy-internal-sink-view obj))
    to-text   (prob (sexy-internal-sink-view obj))
    to-bool   (prob true)
    messages  (prob sink-messages)
    answers?  (prob (prom (or (default-messages.has? msg) (sink-messages.has? msg))))
    autos     (prob '(open? close))
    resends   (prob ())
    default   idk
    open?     (prob (sexy-internal-stream-open? obj))
    close     (prob (sexy-internal-stream-close obj))
    flush     (prob (sexy-internal-sink-flush obj))
    write     (prob
        (λ (thing)
            (sexy-internal-sink-print obj thing.view)))
    print     (prob 
        (λ (thing)
            (sexy-internal-sink-print obj thing.to-text)))
    say       (prob
        (λ (thing)
            (sexy-internal-sink-print obj (cat thing.to-text "\n"))))
    nl  (prob (sexy-internal-sink-newline obj))
))

(def control-eof (:
    type      (prob 'EOF)
    view      (prob "EOF")
    to-text   (prob "END OF LINE.") ; FIXME - print actual eof-object?
    to-bool   (prob false)
    messages  (prob ())
    answers?  (prob (prom (or (default-messages.has? msg) (proc-messages.has? msg))))
    autos     (prob ())
    resends   (prob ())
    default   idk
))

(def control (:
    null         control-null
    bool         control-bool
    int          control-int
    rational     control-rat
    real         control-real
    rune         control-rune
    symbol       control-symbol
    bin          control-bin
    text         control-text
    environment  control-env
    pair         control-pair
    vector       control-vector
    record       control-record
    λ            control-λ
    proc         control-proc
    operator     control-operator
    source       control-source
    sink         control-sink
    EOF          control-eof
))

(def object-defaults (:
    type    (λ (obj) 'object)
    view    (λ (obj) %(object: @(send obj 'messages)))
    to-text (λ (obj) %(object: @(send obj 'messages)))
    to-bool (λ (obj) true)
))

(proc has-msg? (obj msg)
    ((sexy-internal-object-answers? obj) msg))

(proc autofire (obj msg def-thunk)
    (if (has-msg? obj msg)
        (let (method (sexy-internal-object-get-message obj msg))
            (if (sexy-internal-list-has? (sexy-internal-object-autos obj) msg)
                (method)
                method))
        (def-thunk)))

(proc sender (obj msg)
    (def t (sexy-internal-get-object-type obj))
    (if (sexy-internal-record-has? control t)
        (let (dispatcher (sexy-internal-record-get control t))
            (if (sexy-internal-record-has? dispatcher msg)
                ((sexy-internal-record-get dispatcher msg) obj)
                (((sexy-internal-record-get dispatcher 'default) obj) msg)))
        (case msg
            ; begin with unshadowable reflection messages
            (answers?)
                (sexy-internal-object-answers? obj)
            (autos)
                (sexy-internal-object-autos obj)
            (default)
                (sexy-internal-object-default obj)
            (messages)
                (sexy-internal-object-messages obj)
            (resends)
                (sexy-internal-object-resends obj)
            ; end reflection; begin shadowable messages with defaults
            (type view to-text to-bool)
                (autofire obj msg (λ () ((object-defaults msg) obj)))
            ; regular messages
            default: 
                (autofire obj msg (λ () ((sexy-internal-object-default obj) msg))))))


