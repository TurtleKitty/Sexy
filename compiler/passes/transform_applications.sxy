
(use gen-pass "generic.sxy")

(lib () pass)

; (<λ|proc> x y foo: 1 z bar: 2 ...) -> (<λ|proc> (x y z) (record 'foo 1 'bar 2))

(proc pass (form)
    (if (pair? form)
        (case form.head
            (if quote wall gate guard error)
                ((gen-pass form.head) pass form)
            (seq capture)
                %($form.head @(form.tail.map pass))
            (λ proc)
                ((gen-pass 'proc-id) pass form)
            default:
                (let (the-head (pass form.head))
                    (if (pair? form.tail)
                        (let (the-tail (form.tail.map pass))
                            (let loop (x the-tail.head xs the-tail.tail args () options ())
                                (if (option? x)
                                    (let (opts (pair xs.head (pair %(quote $x.to-symbol) options)))
                                        (if (pair? xs.tail)
                                            (loop xs.1 xs.tail.tail args opts)
                                            %($the-head (list @args.reverse) $(pair 'record opts.reverse))))
                                    (let (yarrrgs (pair x args))
                                        (if (pair? xs)
                                            (loop xs.head xs.tail yarrrgs options)
                                            %($the-head (list @yarrrgs.reverse) $(if options (pair 'record @options.reverse) 'null)))))))
                        %($the-head () null))))
        form))

