
(use gen-pass "generic.sxy")

(lib () pass)

(def procs null)

(proc pass (form proc-db)
    (set! procs proc-db)
    (cps form))

(proc gencont ()
    (gensym "continuation"))

(proc genhand ()
    (gensym "handler"))

(proc genval ()
    (gensym "value"))

(proc cps-frag (cont hand body)
    %(λ (env $cont $hand) $body))

(proc cps (form)
    (if (and (pair? form) (list? form))
        (case form.head
            (quote)    (cps-quote form)
            (if)       (cps-if form)
            (seq)      (cps-seq form)
            (λ)        (cps-lambda form)
            (proc)     (cps-proc form)
            (wall)     (cps-wall form)
            (gate)     (cps-gate form)
            (capture)  (cps-capture form)
            (guard)    (cps-guard form)
            (error)    (cps-error form)
            (load)     (cps-load form)
            default:   (cps-application form))
        (cps-atom form)))

(proc cps-quote (form)
    (def cont (gencont))
    (def hand (genhand))
    (cps-frag
        cont
        hand
        %($cont (quote $form.1))))

(proc cps-if (form)
    (def pred (cps form.1))
    (def if-true (cps form.2))
    (def if-false (cps form.3))
    (def cont (gencont))
    (def hand (genhand))
    (def pred-val (genval))
    (def bool (genval))
    (cps-frag
        cont
        hand
        %($pred
            env
            (λ ($pred-val)
                (send
                    (λ ($bool)
                        (if $bool
                            ($if-true  env $cont $hand)
                            ($if-false env $cont $hand)))
                    $hand
                    null
                    $pred-val
                    'to-bool))
            $hand)))

(proc cps-seq (form)
    ; all seqs should be binary by now
    (def cps-head (cps form.1))
    (def cps-tail (cps form.2))
    (def cont (gencont))
    (def hand (genhand))
    (def whatever (genval))
    (cps-frag
        cont
        hand
        %($cps-head
            env
            (λ ($whatever) ($cps-tail env $cont $hand))
            $hand)))

(proc cps-lambda (form)
    (def cont (gencont))
    (def hand (genhand))
    (def lambda-cont (gencont))
    (def lambda-hand (genhand))
    (def new-args (pair lambda-cont (pair lambda-hand form.2)))
    (cps-frag
        cont
        hand
        %($cont (sexy-primitive-proc env $(procs form.1) (λ $new-args @(cps form.tail.tail.tail))))))

(proc cps-proc (form)
    (def cont (gencont))
    (def hand (genhand))
    (def lambda-hand (genhand))
    (def new-args (pair 'return (pair lambda-hand form.2)))
    (cps-frag
        cont
        hand
        %($cont (sexy-primitive-proc env $(procs form.1) (λ $new-args @(cps form.tail.tail.tail))))))

(proc cps-wall (form)
    (def cont (gencont))
    (def hand (genhand))
    (def partitioner (genval))
    (def noob (genval))
    (def args form.1)
    (def cps-body (cps form.tail.tail))
    (cps-frag
        cont
        hand
        %(send
            (λ ($partitioner)
                ($partitioner
                    (λ ($noob)
                        ($cps-body $noob $cont $hand))
                    $hand
                    null
                    @args))
            $hand
            null
            env
            'partition)))

(proc cps-gate (form)
    (def cps-body (cps form.1))
    (def cont (gencont))
    (def hand (genhand))
    (cps-frag
        cont
        hand
        %($cont
            ($cps-body env identity $hand))))

(proc cps-capture (form)
    (def k-arg form.1)
    (def cps-lamb (cps %(λ ($k-arg) @form.tail.tail)))
    (def cont (gencont))
    (def hand (genhand))
    (def funk (genval))
    (def k-val (genval))
    (cps-frag
        cont
        hand
        %($cps-lamb
            env
            (λ ($funk)
                ($funk
                    identity
                    $hand
                    null
                    $cont))
            $hand)))

(proc cps-guard (form)
    (def handler (cps form.1))
    (def cps-body (cps form.tail.tail))
    (def cont (gencont))
    (def hand (genhand))
    (def funk (genval))
    (def e (genval))
    (def k (genval))
    (cps-frag
        cont
        hand
        %($handler
            env
            (λ ($funk)
                (cps-body
                    env
                    $cont
                    (λ ($e $k) ($funk $cont $hand null $e $k))))
            $hand)))

(proc cps-error (form)
    (def error-obj (cps form.1))
    (def cont (gencont))
    (def hand (genhand))
    (def e (genval))
    (cps-frag
        cont
        hand
        %($error-obj
            env
            (λ ($e)
                ($hand $e $cont))
            $hand)))

(proc cps-list (xs)
    (def cont (gencont))
    (def hand (genhand))
    (def h (genval))
    (def t (genval))
    (if (pair? xs)
        (let (head (cps xs.head) tail (cps-list xs.tail))
            (cps-frag
                cont
                hand
                %($head
                    env
                    (λ ($h)
                        (tail
                            env
                            (λ ($t) ($cont (pair h t)))
                            $hand))
                    $hand)))
        (cps-frag cont hand %($cont ()))))

(proc cps-application (form)
    (def cps-proc (cps form.head))
    (def cps-args (cps-list form.tail))
    (def cont (gencont))
    (def hand (genhand))
    (def f (genval))
    (def yargs (genval))
    (cps-frag
        cont
        hand
        %($cps-proc
            env
            (λ ($f) 
                ($cps-args
                    env
                    (λ ($yargs)
                        (sexy-primitive-apply $cont $hand $f $yargs))
                    $hand))
            $hand)))

(proc cps-atom (form)
    (def cont (gencont))
    (def hand (genhand))
    (cps-frag cont hand %($cont $form)))


(rem:

; http://matt.might.net/articles/cps-conversion/
; someday I'll grok this enough to implement it correctly

(proc atomic? (form)
    (if (pair? form)
        ((send '(quote proc λ) 'has?) form.head)
        true))

(proc M (form)
    (when (not (atomic? form))
        (error (object 'type 'error 'form form 'name 'not-an-atom! 'to-text "WRONG!")))
    (if (not (pair? form))
        form
        (case form.head
            (quote) form
            (λ) (seq
                (def k (gencont)) ; user continuation
                (def e (genhand)) ; error continuation
                %($form.head $form.2 $(append form.3 (list k e)) @form.tail.tail.tail.tail)) ; remember the added IDs from pass 2
            (proc) (seq
                (def k 'return)    ; user continuation
                (def e (genhand))  ; error continuation
                %($form.head $form.2 $(append form.3 (list k e)) @form.tail.tail.tail.tail)) ; remember the added IDs from pass 2
            default: (error 'wtf))))

(proc T-c (form c)
    (debug (list 'T-c form c))
    (if (atomic? form)
        %($c $(M form))
        (case form.head
            (def) form
            (if) (seq
                (def k (gencont))
                %((λ ($k)
                    $(T-k form.1
                        (proc (p)
                            %(if $p
                                 $(T-c form.2 k)
                                 $(T-c form.3 k))))) $c))
            (seq) (T-k form.1
                    (proc (x)
                        (T-c form.2 c)))
            (wall) form
            (gate) form
            (capture) form
            (guard) form
            (error) form
            (load) form
            default: ; procedure application
                (T-k form.head
                    (proc (f)
                        (T*-k form.tail
                            (proc (args)
                                %($f @args $c))))))))

(proc T-k (form k)
    (debug (list 'T-k form k))
    (if (atomic? form)
        (k (M form))
        (case form.head
            (def) (seq
                (def rv (gensym "value"))
                %((λ ($rv)
                    (def form.1 $rv))))
            (if) (seq
                (def rv (gensym "value"))
                (def cont %(λ ($rv) $(k rv)))
                (T-k form.1
                    (proc (aexp)
                        %(if $aexp 
                            $(T-c form.2 cont)
                            $(T-c form.3 cont)))))
            (seq) (T-k form.1
                    (proc (x)
                        (T-k form.2 k)))
            (wall) form
            (gate) form
            (capture) form
            (guard) form
            (error) form
            (load) form
            default: ; procedure application
                (def rv (gensym "value"))
                (def cont %(λ ($rv) $(k rv)))
                (T-c form cont))))

(proc T*-k (exprs k)
    (if exprs.empty?
        (k ())
        (T-k exprs.head
            (proc (hd)
                (T*-k exprs.tail
                    (proc (tl)
                        (k (pair hd tl))))))))
)


