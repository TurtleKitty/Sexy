
(macro slurpee ()
    '(fun slurp-file (f)
        (sys.fs.from
            f
            (fn (p)
                p.read-text))))

(slurpee)
(macro-eval (slurpee))

(def home-dir "~/.sexy")
(def sexy-module-dir   (cat home-dir "/modules"))
(def sexy-cache-dir    (cat home-dir "/compiled"))
(def sexy-symbols-file (cat home-dir "/symbols.sxy"))
(def symbols-dot-sexy  (slurp-file "./symbols.sxy"))

(def cli-env env)

(fun start ()
    (def args rest)
    (when (= args.size 0)
        (usage))
    (fun prep-dir (path)
        (when (not (sys.fs.exists? path))
            (sys.fs.mkdir path)))
    (def cmd args.head.to-symbol)
    (prep-dir sexy-mod-dir)
    (prep-dir sexy-cache-dir)
    (write-symbols-file)
    ; symbols-env
    (def control (:
        repl    sexy-repl
        eval    sexy-eval-string
        run     sexy-run
        check   sexy-check
        expand  sexy-expand
        compile sexy-compile
        clean   sexy-clean))
    (def handler (control cmd))
    (if handler
        (handler.apply args.tail opt)
        (seq
            (sys.log (cat "Unknown command: " cmd))
            (usage))))


(fun usage ()
    (sys.say (text:
Usage:

sexy repl
sexy eval "<code string>"
sexy run <filename>
sexy check <filename>
sexy expand <filename>
sexy compile <filename>
sexy clean))
    (sys.proc.exit))

(fun write-symbols-file ()
    (if (not (sys.fs.exists? sexy-symbols-file))
        (sys.fs.to
            sexy-symbols-file
            (fn (f)
                (f.print symbols-dot-sxy)))))

(fun sexy-repl ()
    (repl (cli-env.extend () ()) sys.stdin sys.stdout sys.stderr))

(fun sexy-eval-string (str)
    (sys.say
        (cli-env.eval ((cli-env.extend () ()) 'expand) (parse str))))

(fun sexy-run (filename)
    ; compile then exec
    null)

(fun sexy-check (filename) null)

(fun sexy-expand (filename)
    ; expand and print - don't compile or cache
    (def struct (parse (slurp-file filename)))
    (sys.write (cli-env.expand (parse (slurp-file filename)))))

(fun sexy-compile (filename)
    ; expand, compile, and cache - don't run
    null)

(fun sexy-clean () null)

(start.apply sys.rest sys.opt)


; 13 (define (symbols-env)
; 14     (define expanded (read-expand-cache-prog sexy-use-symbols (local-env)))
; 15     (define compiled (sexy-seq-subcontractor (cdr expanded) #t))
; 16     (define the-env (local-env))
; 17     (compiled the-env top-cont top-err)
; 18     (set! load-symbols-env the-env))

