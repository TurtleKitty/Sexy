
(use normalize-procs "passes/normalize_procs.sxy")
(use capture-lambda "passes/make_capture_lambda_explicit.sxy")
(use identify-procs "passes/identify_procs.sxy")
(use quote-all-literals "passes/quote_literals.sxy")
(use specify-implied-seq "passes/make_implied_seq_explicit.sxy")
(use remove-pointless-seq "passes/remove_pointless_seq.sxy")
(use prep-defs "passes/prepare_defs_for_mutual_recursion.sxy")
(use simplify-seq "passes/simplify_seq.sxy")
(use flatten-seq "passes/flatten_seq.sxy")
(use def-to-env-msg "passes/def_to_env_msg.sxy")
(use var-to-env-msg "passes/var_to_env_msg.sxy")
(use proc-transform "passes/transform_procedures.sxy")
(use app-transform "passes/transform_applications.sxy")
;(use cps-transform "passes/cps_transform.sxy")

(lib () compile)

(def i 0)
(def proc-db (:))

(proc meow (label)
    (set! i i.inc)
    (debug %($i $label @rest)))

(proc compile (form)
    (meow 'BEGIN form)
    (def np (normalize-procs form))
    (meow 'norm-proc np)
    (def cl (capture-lambda np))
    (meow 'capture-lambda cl)
    (def ip (identify-procs cl proc-db)) ; mutate!
    (meow 'id-proc ip) (debug proc-db)
    (def qal (quote-all-literals ip))
    (meow 'quote-lits qal)
    (def siq (specify-implied-seq qal))
    (meow 'specify-seq siq)
    (def rps (remove-pointless-seq siq))
    (meow 'remove-dumb-seqs rps)
    (def pds (prep-defs rps))
    (meow 'prep-defs pds)
    (def trpr (proc-transform pds)) ; these defs need no prep
    (meow 'proc-transform trpr)
    (def ss (simplify-seq trpr))
    (meow 'simplify-seq ss)
    (def fs (flatten-seq ss))
    (meow 'flat-seq fs)
    (def ss2 (simplify-seq fs)) ; resimplify after flattening
    (meow 'simplify-seq2 ss2)
    (def dtem (def-to-env-msg ss2))
    (meow 'def-to-env-msg dtem)
    (def taps (app-transform dtem))
    (meow 'app-transform taps)
    (def vtem (var-to-env-msg taps))
    (meow 'var-to-env-msg vtem)
vtem
)
(rem:
    (def cps (cps-transform taps))
    (meow 'cps-transform cps)
    cps)
